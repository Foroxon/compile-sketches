name: Test Python code

env:
  # See: https://pypi.org/project/poetry/#history
  POETRY_VERSION: 1.4.0

on:
  pull_request:
    paths:
      - '.github/workflows/test-python.yml'
      - '.python-version'
      - '**/poetry.lock'
      - '**/pyproject.toml'
      - 'compilesketches/**'

  push:
    paths:
      - '.github/workflows/test-python.yml'
      - '.python-version'
      - '**/poetry.lock'
      - '**/pyproject.toml'
      - 'compilesketches/**'

  # Catch issues resulting from new patch releases of Python in the APT repository
  schedule:
    # run every Tuesday at 3 AM UTC
    - cron: "0 3 * * 2"

  # workflow_dispatch event allows the workflow to be triggered manually
  # See: https://docs.github.com/en/actions/reference/events-that-trigger-workflows#workflow_dispatch
  workflow_dispatch:

  # repository_dispatch event allows the workflow to be triggered via the GitHub API
  # See: https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch
  repository_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      PYTHON_PROJECT_PATH: ${GITHUB_WORKSPACE}/compilesketches
      PYTHON_PROJECT_TESTS_PATH: ${GITHUB_WORKSPACE}/compilesketches/tests
      COVERAGE_DATA_FILENAME: coverage.xml

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v4.5.0
        with:
          python-version-file: .python-version

      - name: Install Poetry
        run: |
          pipx \
            install \
              poetry==${{ env.POETRY_VERSION }}

      - name: Install Python Dependencies
        run: |
          poetry install

      - name: Run Python unit tests and record code coverage data
        run: |
          export PYTHONPATH="${{ env.PYTHON_PROJECT_PATH }}"
          poetry run \
            python \
              -m \
                coverage run \
                  --source="${{ env.PYTHON_PROJECT_PATH }}" \
                  --module \
                    pytest "${{ env.PYTHON_PROJECT_TESTS_PATH }}"
          # Generate coverage data file for consumption by `codecov/codecov-action`.
          # Otherwise that action generates the file using the system Python environment, which doesn't work.
          poetry run \
            python \
              -m \
                coverage xml \
                  -o "${{ github.workspace }}/${{ env.COVERAGE_DATA_FILENAME }}"

      - name: Display code coverage report
        run: |
          poetry run \
            python \
              -m \
                coverage report

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ${{ env.COVERAGE_DATA_FILENAME }}
          fail_ci_if_error: true
